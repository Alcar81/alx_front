name: Déployer Frontend Dev

on:
  push:
    branches:  
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env:
      ENV: ${{ vars.ENV }}      
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DEPLOY_DIRECTORY: ${{ vars.DEPLOY_DIRECTORY }}
      CONTAINER_NAME: ${{ vars.FRONT }}_${{ vars.NGINX }}_${{ vars.ENV }}
      NETWORK: ${{ vars.NET }}_${{ vars.ENV }}
      FRONTEND_PORT: ${{ vars.FRONTEND_PORT }} # Garde le port d'accès public sur 3001
      CONTAINER_PORT: ${{ vars.CONTAINER_PORT }} # Change le port interne exposé par nginx
      FRONT: ${{ vars.FRONT }}
      NGINX: ${{ vars.NGINX }}
      
      

    steps:
      - name: 1 - Afficher les variables générées
        run: |
          echo "Environnement : $ENV"
          echo "Réseau Docker : $NETWORK"
          echo "Répertoire de déploiement : $DEPLOY_DIRECTORY"
          echo "Nom du conteneur : $CONTAINER_NAME"
          echo "Port Frontend : $FRONTEND_PORT"
          echo "Port Conteneur : $CONTAINER_PORT"
          echo "Chemin de répertoire :$DEPLOY_DIRECTORY"

      - name: 2 - Checkout repository
        uses: actions/checkout@v3

      - name: 3 - Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 4 - Install dependencies
        run: npm install

      - name: 5 - Build project
        run: npm run build

      - name: 6 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          eval $(ssh-agent -s) # Démarre l'agent SSH
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          ssh-add /tmp/git_id_rsa # Ajoute la clé à l'agent SSH
          mkdir -p ~/.ssh # Assure que le répertoire .ssh existe
          touch ~/.ssh/known_hosts # Assure que le fichier known_hosts existe
          ssh-keyscan -p ${SSH_PORT} -H ${SERVER_IP} >> ~/.ssh/known_hosts

      - name: 7 - Gérer le réseau Docker
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker network create $NETWORK || true
          "

      # Étape 8 : Copier le build et les fichiers nécessaires sur le serveur
      - name: 8 - Copy build and config to server
        run: |
          mkdir -p build_with_config
          cp -R build/* build_with_config/
          cp package.json package-lock.json build_with_config/
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            mkdir -p $DEPLOY_DIRECTORY && chmod -R 755 $DEPLOY_DIRECTORY
          "
          rsync -avz \
            --exclude='.env' \
            --exclude='node_modules/' \
            build_with_config/ ${SSH_USER}@${SERVER_IP}:${DEPLOY_DIRECTORY} -e "ssh -p ${SSH_PORT} -o IdentitiesOnly=yes -i /tmp/git_id_rsa"
          rm -rf build_with_config

      - name: 9 - Install dependencies on server
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            cd $DEPLOY_DIRECTORY && [ ! -d 'node_modules' ] && npm install || echo 'Dependencies already installed.'
          "

      - name: 10 - Restart Frontend Container
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            DEPLOY_DIRECTORY=${{ vars.DEPLOY_DIRECTORY }}
            CONTAINER_NAME=${{ vars.FRONT }}_${{ vars.NGINX }}_${{ vars.ENV }}
            NETWORK=${{ vars.NET }}_${{ vars.ENV }}
            FRONTEND_PORT=${{ vars.FRONTEND_PORT }}
            CONTAINER_PORT=${{ vars.CONTAINER_PORT }}
      
            echo "Chemin de répertoire : $DEPLOY_DIRECTORY"
            echo "Nom du conteneur : $CONTAINER_NAME"
            echo "Réseau Docker : $NETWORK"
            echo "Port Frontend : $FRONTEND_PORT"
            echo "Port Conteneur : $CONTAINER_PORT"
      
            echo "Arrêt et suppression du conteneur existant, s'il existe..."
            docker ps -a --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -w "$CONTAINER_NAME" && docker stop $CONTAINER_NAME || true
            docker ps -a --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -w "$CONTAINER_NAME" && docker rm $CONTAINER_NAME || true
      
            echo "Validation des chemins avant la création du conteneur..."
            if [ -d "$DEPLOY_DIRECTORY" ]; then
              echo "Le chemin $DEPLOY_DIRECTORY est valide."
            else
              echo "Erreur : le chemin $DEPLOY_DIRECTORY n'existe pas." >&2
              exit 1
            fi
      
            echo "Recréation du conteneur avec les dernières configurations..."
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -p ${FRONTEND_PORT}:${CONTAINER_PORT} \
              -v $DEPLOY_DIRECTORY:/usr/share/nginx/html:ro \
              nginx:alpine
      
            echo "Conteneur recréé avec succès !"
          EOF
              
    

      - name: 11 - Health Check
        run: |
          curl --max-time 10 -I http://${SERVER_IP}:${FRONTEND_PORT} || exit 1
