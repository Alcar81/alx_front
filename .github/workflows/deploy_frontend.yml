name: Déployer Frontend Dev 

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env:
      ENV: ${{ vars.ENV }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DEPLOY_DIRECTORY: ${{ vars.DEPLOY_DIRECTORY }}
      CONTAINER_NAME: ${{ vars.FRONT }}_${{ vars.NGINX }}_${{ vars.ENV }}
      NETWORK: ${{ vars.NET }}_${{ vars.ENV }}
      FRONTEND_PORT: ${{ vars.FRONTEND_PORT }}
      CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}
      FRONT: ${{ vars.FRONT }}
      NGINX: ${{ vars.NGINX }}
      REACT_APP_MAINTENANCE_MODE: ${{ vars.REACT_APP_MAINTENANCE_MODE }}
      

    steps:
      - name: 1 - Afficher les variables générées
        run: |
          echo "Environnement : $ENV"
          echo "Réseau Docker : $NETWORK"
          echo "Répertoire de déploiement : $DEPLOY_DIRECTORY"
          echo "Nom du conteneur : $CONTAINER_NAME"
          echo "Port Frontend : $FRONTEND_PORT"
          echo "Port Conteneur : $CONTAINER_PORT"

      - name: 2 - Checkout repository
        uses: actions/checkout@v3

      - name: 3 - Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 4 - Install dependencies
        run: npm install

      - name: 5 - Build project
        run: npm run build

      - name: 6 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          ssh-add /tmp/git_id_rsa
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -p ${SSH_PORT} -H ${SERVER_IP} >> ~/.ssh/known_hosts

      - name: 7 - Gérer le réseau Docker
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker network create $NETWORK || true
          "

      - name: 8 - Copy build and config to server
        run: |
          mkdir -p build_with_config
          cp -R build/* build_with_config/
          cp package.json package-lock.json build_with_config/
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            mkdir -p $DEPLOY_DIRECTORY && chmod -R 755 $DEPLOY_DIRECTORY
          "
          rsync -avz \
            --exclude='.env' \
            --exclude='node_modules/' \
            build_with_config/ ${SSH_USER}@${SERVER_IP}:${DEPLOY_DIRECTORY} -e "ssh -p ${SSH_PORT} -o IdentitiesOnly=yes -i /tmp/git_id_rsa"
          rm -rf build_with_config

      - name: 9 - Install dependencies on server
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            cd $DEPLOY_DIRECTORY && [ ! -d 'node_modules' ] && npm install || echo 'Dependencies already installed.'
          "

      - name: 10 - Restart Frontend Container
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            DEPLOY_DIRECTORY=${{ vars.DEPLOY_DIRECTORY }}
            CONTAINER_NAME=${{ vars.FRONT }}_${{ vars.NGINX }}_${{ vars.ENV }}
            NETWORK=${{ vars.NET }}_${{ vars.ENV }}
            FRONTEND_PORT=${{ vars.FRONTEND_PORT }}
            CONTAINER_PORT=${{ vars.CONTAINER_PORT }}
      
            echo "Chemin de répertoire : $DEPLOY_DIRECTORY"
            echo "Nom du conteneur : $CONTAINER_NAME"
            echo "Réseau Docker : $NETWORK"
            echo "Port Frontend : $FRONTEND_PORT"
            echo "Port Conteneur : $CONTAINER_PORT"
      
            echo "Arrêt et suppression du conteneur existant, s'il existe..."
            docker ps -a --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -w "$CONTAINER_NAME" && docker stop $CONTAINER_NAME || true
            docker ps -a --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -w "$CONTAINER_NAME" && docker rm $CONTAINER_NAME || true
      
            echo "Validation des chemins avant la création du conteneur..."
            if [ -d "$DEPLOY_DIRECTORY" ]; then
              echo "Le chemin $DEPLOY_DIRECTORY est valide."
            else
              echo "Erreur : le chemin $DEPLOY_DIRECTORY n'existe pas." >&2
              exit 1
            fi
      
            echo "Recréation du conteneur avec les dernières configurations..."
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -p ${FRONTEND_PORT}:${CONTAINER_PORT} \
              -v $DEPLOY_DIRECTORY:/usr/share/nginx/html:ro \
              nginx:alpine
      
            echo "Conteneur recréé avec succès !"
          EOF

      - name: 10.1 - Update Nginx configuration
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            DEPLOY_DIRECTORY=${{ vars.DEPLOY_DIRECTORY }}
            MODE=$(grep REACT_APP_MAINTENANCE_MODE $DEPLOY_DIRECTORY/.env | cut -d '=' -f 2)
            echo "=== Configuration Nginx en mode $MODE ==="
      
            if [ "$MODE" = "true" ]; then
              echo "Mode maintenance activé."
              cat <<EOT > /tmp/default.conf
              server {
                  listen 80;
                  server_name localhost;
              
                  location / {
                      return 503;
                  }
              
                  error_page 503 /maintenance.html;
                  location = /maintenance.html {
                      root $DEPLOY_DIRECTORY;
                  }
                }
                EOT
              else
                echo "Mode production activé."
                cat <<EOT > /tmp/default.conf
                server {
                    listen 80;
                    server_name localhost;
              
                    location / {
                      root $DEPLOY_DIRECTORY;
                      index index.html index.htm;
                    }
              
                    error_page 404 /404.html;
                    location = /404.html {
                        root $DEPLOY_DIRECTORY;
                    }
                }
                EOT
              fi
              
              echo "Déploiement de la nouvelle configuration Nginx..."
              docker cp /tmp/default.conf front_nginx_dev:/etc/nginx/conf.d/default.conf
              docker exec front_nginx_dev nginx -s reload
            EOF      

      - name: 11 - Validate Nginx configuration
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            echo "Validation de la configuration Nginx..."
            docker exec front_nginx_dev nginx -t || exit 1
            echo "Configuration Nginx valide."

            echo "Test de connectivité locale..."
            curl -I http://localhost:${FRONTEND_PORT} || exit 1
            echo "Service accessible localement sur le port ${FRONTEND_PORT}."
          EOF

      - name: 12 - Health Check and Debugging
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            echo "=== Vérification du contenu monté dans le conteneur ==="
            docker exec front_nginx_dev ls -l /usr/share/nginx/html || echo "Erreur : Contenu manquant dans le conteneur."

            echo "=== Vérification de la configuration Nginx ==="
            docker exec front_nginx_dev cat /etc/nginx/conf.d/default.conf || echo "Erreur : Impossible de lire la configuration Nginx."

            echo "=== Tester la connectivité en local sur le serveur ==="
            curl -I http://localhost:${FRONTEND_PORT} || echo "Erreur : Le service n'est pas accessible localement sur ${FRONTEND_PORT}."

            echo "=== Vérifier les permissions sur le répertoire local ==="
            ls -ld ${DEPLOY_DIRECTORY} || echo "Erreur : Problème de permissions ou de chemin sur ${DEPLOY_DIRECTORY}."
          EOF