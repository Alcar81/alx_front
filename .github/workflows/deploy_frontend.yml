#/home/dev.alxmultimedia.com/frontend/deploy_frontend.yml
name: Déployer Frontend

on:
  push:
    branches:
      - master
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      DEPLOY_DIRECTORY: ${{ secrets.DEPLOY_DIRECTORY }}
      ENVIRONMENT: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}
      FRONTEND_PORT: 3001

    steps:
      # Étape 1 : Checkout du dépôt Git
      - name: 1 - Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Configuration de Node.js
      - name: 2 - Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Étape 3 : Installation des dépendances
      - name: 3 - Install dependencies
        run: npm install

      # Étape 4 : Build du projet
      - name: 4 - Build project
        run: npm run build

      # Étape 5 : Démarrer l'agent SSH et ajouter la clé
      - name: 5 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          eval $(ssh-agent -s) # Démarre l'agent SSH
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          ssh-add /tmp/git_id_rsa # Ajoute la clé à l'agent SSH

      # Étape 6 : Copier le build sur le serveur
      - name: 6 - Copy build to server
        run: |
          mkdir -p ~/.ssh # Crée le répertoire SSH s'il n'existe pas
          touch ~/.ssh/known_hosts # Crée le fichier known_hosts s'il n'existe pas
          ssh-keyscan -p ${SSH_PORT} -H ${SERVER_IP} >> ~/.ssh/known_hosts
          rsync -avz --delete build/ ${SSH_USER}@${SERVER_IP}:${DEPLOY_DIRECTORY} -e "ssh -p ${SSH_PORT} -o IdentitiesOnly=yes -i /tmp/git_id_rsa"

      # Étape 7 : Redémarrer le conteneur Docker du frontend
      - name: 7 - Restart Frontend Container
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker ps -a --filter \"name=front_$ENVIRONMENT\" --format '{{.Names}}' | grep -w \"front_$ENVIRONMENT\" && \
              docker stop front_$ENVIRONMENT || true &&
              docker rm front_$ENVIRONMENT || true
            docker run -d --name front_$ENVIRONMENT \
              -p $FRONTEND_PORT:80 \
              -v $DEPLOY_DIRECTORY:/usr/share/nginx/html \
              nginx:alpine
          "

      # Étape 8 : Vérification de l'état
      - name: 8 - Health Check
        run: |
          curl -I http://${{ secrets.SERVER_IP }}:3001 || exit 1
