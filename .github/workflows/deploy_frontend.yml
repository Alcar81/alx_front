name: D√©ployer Frontend Dev

on:
  push:
    branches:
      - dev
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    env:
      ENV: ${{ vars.ENV }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      DEPLOY_DIRECTORY: ${{ vars.DEPLOY_DIRECTORY }}
      CONTAINER_NAME: ${{ vars.FRONT }}_${{ vars.NGINX }}_${{ vars.ENV }}
      CONTAINER_BACKEND_NAME: back_node_${{ vars.ENV }}
      NETWORK: ${{ vars.NET }}_${{ vars.ENV }}
      FRONTEND_PORT: ${{ vars.FRONTEND_PORT }}
      CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}
      FRONT: ${{ vars.FRONT }}
      NGINX: ${{ vars.NGINX }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
      REACT_APP_FRONTEND_URL: ${{ secrets.REACT_APP_FRONTEND_URL }}
      REACT_APP_ENV: ${{ vars.ENV }}
      REACT_APP_WEBSITE_NAME: ${{ vars.REACT_APP_WEBSITE_NAME }}

    steps:
      # √âtape 1 - Afficher les variables
      - name: 1 - Afficher les variables
        run: |
          echo "Environnement : $ENV"
          echo "R√©seau Docker : $NETWORK"
          echo "R√©pertoire de d√©ploiement : $DEPLOY_DIRECTORY"
          echo "Nom du conteneur frontend : $CONTAINER_NAME"
          echo "Nom du conteneur backend : $CONTAINER_BACKEND_NAME"
          echo "Port Frontend : $FRONTEND_PORT"
          echo "Port Conteneur : $CONTAINER_PORT"

      # √âtape 2 - Checkout  repository
      - name: 2 - Checkout repository
        uses: actions/checkout@v3

      # √âtape 3 - Set up Node.js
      - name: 3 - Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.18.1"

      # √âtape 4 - Install dependencies
      - name: 4 - Install dependencies
        run: npm install

      - name: 4.1 - V√©rification de jsdom
        run: |
          if ! npm ls jsdom >/dev/null 2>&1; then
            echo "üîµ jsdom manquant, installation en cours..."
            npm install --save-dev jsdom
          else
            echo "‚úÖ jsdom d√©j√† install√©."
          fi

      - name: 4.2 - Correction jest-environment-jsdom
        run: |
          if ! npm ls jest-environment-jsdom >/dev/null 2>&1; then
            echo "üîµ jest-environment-jsdom manquant, installation en cours..."
            npm install --save-dev jest-environment-jsdom@28.1.3
          else
            echo "‚úÖ jest-environment-jsdom d√©j√† install√©."
          fi

      # √âtape 5 - Ex√©cuter les tests
      - name: 5 - Ex√©cuter les tests
        run: npm test

      # √âtape 6.0 - G√©n√©rer le fichier .env local pour le build React
      - name: 6.0 - G√©n√©rer le fichier .env local
        run: |
          echo "G√©n√©ration du fichier .env local pour React..."
          cat <<EOT > .env
            REACT_APP_API_URL=${{ env.REACT_APP_API_URL }}
            REACT_APP_FRONTEND_URL=${{ env.REACT_APP_FRONTEND_URL }}
            REACT_APP_ENV=${{ env.REACT_APP_ENV }}
            REACT_APP_WEBSITE_NAME=${{ vars.REACT_APP_WEBSITE_NAME }}
            # Options techniques
            REACT_APP_ENABLE_DEBUG=false
            REACT_APP_MAINTENANCE_MODE=false
          EOT
            cat .env

      # √âtape 6.1 - Nettoyer le r√©pertoire `build` local avant le nouveau build
      - name: 6.1 - Nettoyer le r√©pertoire build local
        run: |
          echo "Nettoyage du r√©pertoire build local..."
          rm -rf build || true

      # √âtape 6.2 - Build project
      - name: 6.2 - Build project
        env:
          REACT_APP_API_URL: ${{ env.REACT_APP_API_URL }}
          REACT_APP_FRONTEND_URL: ${{ env.REACT_APP_FRONTEND_URL }}
        run: npm run build

      # √âtape 7 - Start SSH agent and add key
      - name: 7 - Start SSH agent and add key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" > /tmp/git_id_rsa
          chmod 600 /tmp/git_id_rsa
          ssh-add /tmp/git_id_rsa
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -p ${SSH_PORT} -H ${SERVER_IP} >> ~/.ssh/known_hosts

      # √âtape 8 - G√©rer le r√©seau Docker
      - name: 8 - G√©rer le r√©seau Docker
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            docker network create $NETWORK || true
          "

      # √âtape 9 - Copy build and config to server
      - name: 9 - Copy build and config to server
        run: |
          mkdir -p build_with_config
          cp -R build/* build_with_config/
          cp package.json package-lock.json build_with_config/
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            mkdir -p $DEPLOY_DIRECTORY && chmod -R 755 $DEPLOY_DIRECTORY
          "
          rsync -avz \
            --exclude='.env' \
            --exclude='node_modules/' \
            build_with_config/ ${SSH_USER}@${SERVER_IP}:${DEPLOY_DIRECTORY} -e "ssh -p ${SSH_PORT} -o IdentitiesOnly=yes -i /tmp/git_id_rsa"
          rm -rf build_with_config

      # √âtape 10 - Install dependencies on server
      - name: 10 - Install dependencies on server
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP "
            cd $DEPLOY_DIRECTORY && [ ! -d 'node_modules' ] && npm install || echo 'Dependencies already installed.'
          "

      # √âtape 11 - Restart Frontend Container
      - name: 11 - Restart Frontend Container
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            DEPLOY_DIRECTORY=${{ vars.DEPLOY_DIRECTORY }}
            CONTAINER_NAME=${{ vars.FRONT }}_${{ vars.NGINX }}_${{ vars.ENV }}
            NETWORK=${{ vars.NET }}_${{ vars.ENV }}
            FRONTEND_PORT=${{ vars.FRONTEND_PORT }}
            CONTAINER_PORT=${{ vars.CONTAINER_PORT }}

            echo "Chemin de r√©pertoire : $DEPLOY_DIRECTORY"
            echo "Nom du conteneur : $CONTAINER_NAME"
            echo "R√©seau Docker : $NETWORK"
            echo "Port Frontend : $FRONTEND_PORT"
            echo "Port Conteneur : $CONTAINER_PORT"

            echo "Arr√™t et suppression du conteneur existant, s'il existe..."
            docker ps -a --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -w "$CONTAINER_NAME" && docker stop $CONTAINER_NAME || true
            docker ps -a --filter "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -w "$CONTAINER_NAME" && docker rm $CONTAINER_NAME || true

            echo "Validation des chemins avant la cr√©ation du conteneur..."
            if [ -d "$DEPLOY_DIRECTORY" ]; then
              echo "Le chemin $DEPLOY_DIRECTORY est valide."
            else
              echo "Erreur : le chemin $DEPLOY_DIRECTORY n'existe pas." >&2
              exit 1
            fi

            echo "Recr√©ation du conteneur avec les derni√®res configurations..."
            docker run -d --name $CONTAINER_NAME \
              --network $NETWORK \
              -p ${FRONTEND_PORT}:${CONTAINER_PORT} \
              -v $DEPLOY_DIRECTORY:/usr/share/nginx/html:ro \
              nginx:alpine

            echo "Conteneur recr√©√© avec succ√®s !"
          EOF

      # √âtape 11.1 - Update Nginx configuration
      - name: 11.1 - Update Nginx configuration
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            DEPLOY_DIRECTORY=${{ vars.DEPLOY_DIRECTORY }}
            MODE=$(grep REACT_APP_MAINTENANCE_MODE $DEPLOY_DIRECTORY../src/config/config.js | cut -d ':' -f2 | tr -d ' ,')
            echo "=== Configuration Nginx en mode $MODE ==="

            if [ "$MODE" = "true" ]; then
              echo "Mode maintenance activ√©."
              cat <<EOT > /tmp/default.conf
          server {
              listen 80;
              server_name localhost;

              location / {
                  return 503;
              }

              error_page 503 /maintenance.html;
              location = /maintenance.html {
                  root $DEPLOY_DIRECTORY;
              }
          }
          EOT
                else
                  echo "Mode production activ√©."
                  cat <<EOT > /tmp/default.conf
          server {
              listen 80;
              server_name localhost;

              location / {
                  root $DEPLOY_DIRECTORY;
                  index index.html index.htm;
              }

              error_page 404 /404.html;
              location = /404.html {
                  root $DEPLOY_DIRECTORY;
              }
          }
          EOT
                fi

                echo "D√©ploiement de la nouvelle configuration Nginx..."
                docker cp /tmp/default.conf front_nginx_dev:/etc/nginx/conf.d/default.conf
                docker exec front_nginx_dev nginx -s reload
          EOF

      # √âtape 12 - Health Check and Debugging
      - name: 12 - Health Check and Debugging
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << 'EOF'
            echo "=== V√©rification du contenu mont√© dans le conteneur ==="
            docker exec front_nginx_dev ls -l /usr/share/nginx/html || echo "Erreur : Contenu manquant dans le conteneur."

            echo "=== V√©rification de la configuration Nginx ==="
            docker exec front_nginx_dev cat /etc/nginx/conf.d/default.conf || echo "Erreur : Impossible de lire la configuration Nginx."

            echo "=== Tester la connectivit√© en local sur le serveur ==="
            curl -I http://localhost:${FRONTEND_PORT} || echo "Erreur : Le service n'est pas accessible localement sur ${FRONTEND_PORT}."

            echo "=== V√©rifier les permissions sur le r√©pertoire local ==="
            ls -ld ${DEPLOY_DIRECTORY} || echo "Erreur : Probl√®me de permissions ou de chemin sur ${DEPLOY_DIRECTORY}."
          EOF

      - name: 13 - Configurer logrotate pour Nginx
        run: |
          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP << EOF
              LOGROTATE_CONF="/etc/logrotate.d/dev.alxmultimedia.com"
              LOG_FILE="/home/dev.alxmultimedia.com/logs/dev.alxmultimedia.com.access_log"

              echo "[INFO] Configuration de logrotate pour \$LOG_FILE..."

              if [ -f "\$LOGROTATE_CONF" ]; then
                echo "[INFO] La configuration logrotate existe d√©j√† : \$LOGROTATE_CONF"
              else
                echo "[INFO] Cr√©ation de la configuration logrotate..."
                cat <<EOT > "\$LOGROTATE_CONF"
            \$LOG_FILE {
                daily
                rotate 7
                compress
                delaycompress
                missingok
                notifempty
                create 0640 www-data www-data
                sharedscripts
                postrotate
                    [ -f /var/run/nginx.pid ] && kill -USR1 \`cat /var/run/nginx.pid\`
                endscript
            }
          EOT
                  echo "[SUCCESS] Configuration logrotate cr√©√©e : \$LOGROTATE_CONF"
                fi

                # V√©rifier la configuration logrotate
                echo "[INFO] Test de la configuration logrotate..."
                logrotate -d "\$LOGROTATE_CONF"
          EOF

      - name: 14 - Red√©marrer le backend apr√®s le d√©ploiement du Frontend
        run: |
          echo "üîÅ Connexion SSH pour red√©marrage du backend et v√©rification post-d√©ploiement..."

          ssh -p $SSH_PORT -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/git_id_rsa $SSH_USER@$SERVER_IP bash <<'EOF'
            set -e

            CONTAINER_BACKEND_NAME="back_node_${{ env.ENV }}"
            BACKEND_PORT=${{ env.BACKEND_PORT }}

            echo "[INFO - 14.1] üîÑ Red√©marrage du conteneur backend : $CONTAINER_BACKEND_NAME"
            docker restart "$CONTAINER_BACKEND_NAME"
            echo "[SUCCESS - 14.2] ‚úÖ Conteneur red√©marr√©"

            echo "[INFO - 14.3] ‚è≥ Attente de l'ouverture du port $BACKEND_PORT..."
            for i in $(seq 1 30); do
              if docker exec "$CONTAINER_BACKEND_NAME" netstat -tln | grep -q ":$BACKEND_PORT"; then
                echo "[SUCCESS - 14.4] ‚úÖ Port $BACKEND_PORT d√©tect√© (tentative $i)"
                break
              else
                echo "[WAIT] Tentative $i/30... en attente"
                sleep 2
              fi
            done

            echo "[INFO - 14.5] üí§ Pause rapide pour stabilisation..."
            sleep 5

            echo "[INFO - 14.6] üîç Test basique de /health..."
            RESPONSE=$(docker exec "$CONTAINER_BACKEND_NAME" curl -s http://localhost:$BACKEND_PORT/health || true)
            if echo "$RESPONSE" | grep -q "ok"; then
              echo "[SUCCESS - 14.7] ‚úÖ /health est fonctionnel"
            else
              echo "[ERROR - 14.7] ‚ùå /health a √©chou√© ! R√©ponse : $RESPONSE" >&2
              exit 1
            fi

            echo "[SUCCESS ‚úÖ] √âtape 14 termin√©e avec succ√®s."
          EOF
